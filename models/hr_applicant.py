# -*- coding: utf-8 -*-
from odoo import models, fields, _
from datetime import timedelta

class HrApplicant(models.Model):
    _inherit = 'hr.applicant'

    # üìå –°—Ç–∞–¥–∏—è 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –≤ —à—Ç–∞—Ç
    expected_salary = fields.Float(string="–û–∂–∏–¥–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞")
    employment_date = fields.Date(string="–î–∞—Ç–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
    trial_start = fields.Date(string="–ù–∞—á–∞–ª–æ –∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ä–æ–∫–∞")
    trial_end = fields.Date(string="–û–∫–æ–Ω—á–∞–Ω–∏–µ –∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ä–æ–∫–∞")
    phone = fields.Char(string="–¢–µ–ª–µ—Ñ–æ–Ω")
    recruiter_id = fields.Many2one('res.users', string="–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ø–æ–¥–±–æ—Ä—É –∫–∞–¥—Ä–æ–≤")
    birth_date = fields.Date(string="–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è")
    company_id = fields.Many2one('res.company', string="–ö–æ–º–ø–∞–Ω–∏—è")

    # üìå –°—Ç–∞–¥–∏—è 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    diploma_pdf = fields.Binary(string="–î–∏–ø–ª–æ–º")
    diploma_filename = fields.Char()

    attachment_pdf = fields.Binary(string="–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    attachment_filename = fields.Char()

    identity_pdf = fields.Binary(string="–£–î–û")
    identity_filename = fields.Char()

    resume_pdf = fields.Binary(string="–†–µ–∑—é–º–µ")
    resume_filename = fields.Char()

    certificate_pdf = fields.Binary(string="–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç")
    certificate_filename = fields.Char()

    registration_address = fields.Char(string="–ê–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    residence_address = fields.Char(string="–ê–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è")

    email = fields.Char(string="–ü–æ—á—Ç–∞")
    phone = fields.Char(string="–¢–µ–ª–µ—Ñ–æ–Ω")

    bank_details_pdf = fields.Char(string="–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã")

    def write(self, vals):
        stage = self.env.ref('hr_custom.hr_stage_documents', raise_if_not_found=False)

        for record in self:
            previous_stage_id = record.stage_id.id
            result = super(HrApplicant, record).write(vals)
            new_stage_id = vals.get('stage_id', record.stage_id.id)

            if stage and previous_stage_id != stage.id and new_stage_id == stage.id:
                business_assistant = self.env.user
                record.activity_schedule(
                    'mail.mail_activity_data_todo',
                    user_id=business_assistant.id,
                    summary='–°–æ–±—Ä–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞',
                    note='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ: –¥–∏–ø–ª–æ–º, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –£–î–û, —Ä–µ–∑—é–º–µ, —Å–ø—Ä–∞–≤–∫–∏ –∏ —Ç.–¥.',
                    date_deadline=fields.Date.context_today(record) + timedelta(days=3)
                )

        return result
