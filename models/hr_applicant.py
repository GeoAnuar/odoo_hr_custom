# -*- coding: utf-8 -*-
from odoo import models, fields, api, _

class HrApplicant(models.Model):
    _inherit = 'hr.applicant'

    # üìå –°—Ç–∞–¥–∏—è 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –≤ —à—Ç–∞—Ç
    expected_salary = fields.Float(string="–û–∂–∏–¥–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞")
    employment_date = fields.Date(string="–î–∞—Ç–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
    trial_start = fields.Date(string="–ù–∞—á–∞–ª–æ –∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ä–æ–∫–∞")
    trial_end = fields.Date(string="–û–∫–æ–Ω—á–∞–Ω–∏–µ –∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ä–æ–∫–∞")
    phone = fields.Char(string="–¢–µ–ª–µ—Ñ–æ–Ω")
    recruiter_id = fields.Many2one('res.users', string="–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ø–æ–¥–±–æ—Ä—É –∫–∞–¥—Ä–æ–≤")
    interviewer_ids = fields.Many2many('res.users', string="–ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä—ã")
    birth_date = fields.Date(string="–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è")
    company_id = fields.Many2one('res.company', string="–ö–æ–º–ø–∞–Ω–∏—è")


    # üìå –°—Ç–∞–¥–∏—è 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    diploma_pdf = fields.Binary(string="–î–∏–ø–ª–æ–º")
    diploma_filename = fields.Char()
    
    attachment_pdf = fields.Binary(string="–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    attachment_filename = fields.Char()

    identity_pdf = fields.Binary(string="–£–î–û")
    identity_filename = fields.Char()

    resume_pdf = fields.Binary(string="–†–µ–∑—é–º–µ")
    resume_filename = fields.Char()

    certificate_pdf = fields.Binary(string="–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç")
    certificate_filename = fields.Char()

    registration_address_pdf = fields.Binary(string="–ê–¥—Ä–µ—Å –ø—Ä–æ–ø–∏—Å–∫–∏")
    registration_address_filename = fields.Char()

    residence_address_pdf = fields.Binary(string="–ê–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è")
    residence_address_filename = fields.Char()

    email = fields.Char(string="–ü–æ—á—Ç–∞")
    
    bank_details_pdf = fields.Binary(string="–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã")
    bank_details_filename = fields.Char()

    # –ê–≤—Ç–æ-–¥–µ–π—Å—Ç–≤–∏–µ: –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ 2 —Å—Ç–∞–¥–∏—é
    @api.onchange('stage_id')
    def _onchange_stage_notify_assistant(self):
        if self.stage_id.name == "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞":
            self._create_assistant_task()

    def _create_assistant_task(self):
        """–°–æ–∑–¥–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É"""
        assistant = self.env.ref('hr_custom.business_assistant_user', raise_if_not_found=False)
        if not assistant:
            return

        self.activity_schedule(
            'mail.mail_activity_data_todo',
            user_id=assistant.id,
            summary="–°–æ–±—Ä–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞",
            note="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–±–µ—Ä–∏—Ç–µ –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã: –¥–∏–ø–ª–æ–º, —Ä–µ–∑—é–º–µ, –£–î–û –∏ –¥—Ä.",
            deadline=fields.Date.today() + fields.Date.to_date("3 days")
        )


    # PDF-—Ñ–∞–π–ª—ã
    employment_contract_pdf = fields.Binary(string="–¢—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä")
    employment_contract_filename = fields.Char()

    nda_pdf = fields.Binary(string="–ù–î–ê")
    nda_filename = fields.Char()

    salary_agreement_pdf = fields.Binary(string="–°–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ –∑–∞—Ä–ø–ª–∞—Ç–µ")
    salary_agreement_filename = fields.Char()

    # –®–∞–±–ª–æ–Ω –ø—Ä–∏–∫–∞–∑–∞
    order_template = fields.Many2one('sign.template', string="–®–∞–±–ª–æ–Ω –ø—Ä–∏–∫–∞–∑–∞")

    def action_sign_order(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è"""
        self.ensure_one()
        template = self.order_template
        if not template:
            return
        return {
            'type': 'ir.actions.client',
            'tag': 'sign.Document',
            'params': {
                'template_id': template.id,
                'signers': [{'role': r.role_id.id, 'partner_id': self.partner_id.id}]
                if self.partner_id else [],
            }
        }
    

    # Stage 4
    contract_signed = fields.Boolean(string="–¢–î –ø–æ–¥–ø–∏—Å–∞–Ω")
    order_signed = fields.Boolean(string="–ü—Ä–∏–∫–∞–∑ –ø–æ–¥–ø–∏—Å–∞–Ω")
    nda_signed = fields.Boolean(string="–ù–î–ê –ø–æ–¥–ø–∏—Å–∞–Ω")

    # Stage 5
    documents_transferred = fields.Boolean(string="–î–æ–∫—É–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É")
    document_transfer_date = fields.Date(string="–î–∞—Ç–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

    accounting_notified = fields.Boolean(string="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—é", default=False)

    def action_notify_accounting(self):
        for applicant in self:
            template = self.env.ref('your_module.email_template_notify_accounting', raise_if_not_found=False)
            if not template:
                raise UserError(_("–®–∞–±–ª–æ–Ω email –¥–ª—è –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω."))
            template.send_mail(applicant.id, force_send=True)
            applicant.accounting_notified = True

    # Stage 7: –ó–∞–Ω–µ—Å–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    signed_documents_pdf = fields.Binary(string="–ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (PDF)")
    signed_documents_filename = fields.Char()

    # Stage 8: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –¥–µ–ª–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    employee_file_pdf = fields.Binary(string="–õ–∏—á–Ω–æ–µ –¥–µ–ª–æ (PDF)")
    employee_file_filename = fields.Char()

    # Stage 9: CV –ø–æ–¥ —Ñ–æ—Ä–º–∞—Ç –ì–µ–æ–º–µ—Ç—Ä–∏–∏
    geometry_cv_pdf = fields.Binary(string="–†–µ–∑—é–º–µ –ø–æ —à–∞–±–ª–æ–Ω—É –ì–µ–æ–º–µ—Ç—Ä–∏–∏ (PDF)")
    geometry_cv_filename = fields.Char()
